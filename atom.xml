<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LiuzNan</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liuzhinan.com/"/>
  <updated>2019-07-25T02:46:27.253Z</updated>
  <id>http://liuzhinan.com/</id>
  
  <author>
    <name>LiuzNan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript干货收藏</title>
    <link href="http://liuzhinan.com/2019/07/25/JavaScript%E5%B9%B2%E8%B4%A7%E6%94%B6%E8%97%8F/"/>
    <id>http://liuzhinan.com/2019/07/25/JavaScript干货收藏/</id>
    <published>2019-07-25T02:16:01.000Z</published>
    <updated>2019-07-25T02:46:27.253Z</updated>
    
    <content type="html"><![CDATA[<p>网上无意发现一篇好文，对于目前常见的面试题，实现了相应方法的核心原理。</p><p>特此码住收藏！</p><a id="more"></a><h2 id="1-实现一个call函数"><a href="#1-实现一个call函数" class="headerlink" title="1. 实现一个call函数"></a><strong>1. 实现一个call函数</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将要改变this指向的方法挂到目标this上执行并返回</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'not funciton'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="built_in">window</span></span><br><span class="line">  context.fn = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">let</span> arg = [...arguments].slice(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> result = context.fn(...arg)</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-实现一个apply函数"><a href="#2-实现一个apply函数" class="headerlink" title="2. 实现一个apply函数"></a><strong>2. 实现一个apply函数</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myapply = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'not funciton'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="built_in">window</span></span><br><span class="line">  context.fn = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">let</span> result</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">    result = context.fn(...arguments[<span class="number">1</span>])</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = context.fn()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-实现一个bind函数"><a href="#3-实现一个bind函数" class="headerlink" title="3. 实现一个bind函数"></a><strong>3. 实现一个bind函数</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mybind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Error'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">let</span> arg = [...arguments].slice(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 处理函数使用new的情况</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> F) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> _this(...arg, ...arguments)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> _this.apply(context, arg.concat(...arguments))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-instanceof的原理"><a href="#4-instanceof的原理" class="headerlink" title="4. instanceof的原理"></a><strong>4. instanceof的原理</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 右边变量的原型存在于左边变量的原型链上</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instanceOf</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> leftValue = left.__proto__</span><br><span class="line">  <span class="keyword">let</span> rightValue = right.prototype</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (leftValue === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (leftValue === right) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    leftValue = rightValue.__proto__</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Object-create的基本实现原理"><a href="#5-Object-create的基本实现原理" class="headerlink" title="5. Object.create的基本实现原理"></a><strong>5. Object.create的基本实现原理</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = obj</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br></pre></td></tr></table></figure><h2 id="6-new本质"><a href="#6-new本质" class="headerlink" title="6. new本质"></a><strong>6. new本质</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span> (<span class="params">fun</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个新对象且将其隐式原型指向构造函数原型</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">      __proto__ : fun.prototype</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行构造函数</span></span><br><span class="line">    fun.call(obj, ...arguments)</span><br><span class="line">    <span class="comment">// 返回该对象</span></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = myNew(person)(<span class="string">'chen'</span>, <span class="number">18</span>) <span class="comment">// &#123;name: "chen", age: 18&#125;</span></span><br></pre></td></tr></table></figure><h2 id="7-实现一个基本的Promise"><a href="#7-实现一个基本的Promise" class="headerlink" title="7. 实现一个基本的Promise"></a><strong>7. 实现一个基本的Promise</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ①自动执行函数，②三个状态，③then</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (fn) &#123;</span><br><span class="line">    <span class="comment">// 三个状态</span></span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'pending'</span></span><br><span class="line">    <span class="keyword">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.reason = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">let</span> resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'pending'</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="string">'fulfilled'</span></span><br><span class="line">        <span class="keyword">this</span>.value = value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> reject = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'pending'</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="string">'rejected'</span></span><br><span class="line">        <span class="keyword">this</span>.reason = value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 自动执行函数</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      fn(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// then</span></span><br><span class="line">  then(onFulfilled, onRejected) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">this</span>.state) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'fulfilled'</span>:</span><br><span class="line">        onFulfilled()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'rejected'</span>:</span><br><span class="line">        onRejected()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-实现浅拷贝"><a href="#8-实现浅拷贝" class="headerlink" title="8. 实现浅拷贝"></a><strong>8. 实现浅拷贝</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. ...实现</span></span><br><span class="line"><span class="keyword">let</span> copy1 = &#123;...&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Object.assign实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> copy2 = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="9-实现一个基本的深拷贝"><a href="#9-实现一个基本的深拷贝" class="headerlink" title="9. 实现一个基本的深拷贝"></a><strong>9. 实现一个基本的深拷贝</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. JOSN.stringify()/JSON.parse()</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123;<span class="attr">x</span>: <span class="number">3</span>&#125;&#125;</span><br><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 递归拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> copy = obj <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class="line">      copy[i] = <span class="keyword">typeof</span> obj[i] === <span class="string">'object'</span> ? deepClone(obj[i]) : obj[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> copy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-使用setTimeout模拟setInterval"><a href="#10-使用setTimeout模拟setInterval" class="headerlink" title="10. 使用setTimeout模拟setInterval"></a><strong>10. 使用setTimeout模拟setInterval</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可避免setInterval因执行时间导致的间隔执行时间不一致</span></span><br><span class="line">setTimeout (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">  setTimeout (<span class="built_in">arguments</span>.callee, <span class="number">500</span>)</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br></pre></td></tr></table></figure><h2 id="11-js实现一个继承方法-借用构造函数继承实例属性"><a href="#11-js实现一个继承方法-借用构造函数继承实例属性" class="headerlink" title="11. js实现一个继承方法// 借用构造函数继承实例属性"></a><strong>11. js实现一个继承方法// 借用构造函数继承实例属性</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 寄生继承原型属性</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> Super = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  Super.prototype = Parent.prototype</span><br><span class="line">  Child.prototype = <span class="keyword">new</span> Super()</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h2 id="12-实现一个基本的Event-Bus"><a href="#12-实现一个基本的Event-Bus" class="headerlink" title="12. 实现一个基本的Event Bus"></a><strong>12. 实现一个基本的Event Bus</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件通信，一个触发与监听的过程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="comment">// 存储事件</span></span><br><span class="line">    <span class="keyword">this</span>.events = <span class="keyword">this</span>.events || <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 监听事件</span></span><br><span class="line">  addListener (type, fn) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.events.get(type)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.events.set(type, fn)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 触发事件</span></span><br><span class="line">  emit (type) &#123;</span><br><span class="line">    <span class="keyword">let</span> handle = <span class="keyword">this</span>.events.get(type)</span><br><span class="line">    handle.apply(<span class="keyword">this</span>, [...arguments].slice(<span class="number">1</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> emitter = <span class="keyword">new</span> EventEmitter()</span><br><span class="line"><span class="comment">// 监听事件</span></span><br><span class="line">emitter.addListener(<span class="string">'ages'</span>, age =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(age)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line">emitter.emit(<span class="string">'ages'</span>, <span class="number">18</span>)  <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><h2 id="13-实现一个双向数据绑定"><a href="#13-实现一个双向数据绑定" class="headerlink" title="13. 实现一个双向数据绑定"></a><strong>13. 实现一个双向数据绑定</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> input = <span class="built_in">document</span>.getElementById(<span class="string">'input'</span>)</span><br><span class="line"><span class="keyword">let</span> span = <span class="built_in">document</span>.getElementById(<span class="string">'span'</span>)</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'text'</span>, &#123;</span><br><span class="line">  configurable: <span class="literal">true</span>,</span><br><span class="line">  enumerable: <span class="literal">true</span>,</span><br><span class="line">  <span class="keyword">get</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'获取数据了'</span>)</span><br><span class="line">    <span class="keyword">return</span> obj.text</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span>(newVal) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'数据更新了'</span>)</span><br><span class="line">    input.value = newVal</span><br><span class="line">    span.innerHTML = newVal</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">input.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  obj.text = e.target.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="14-实现一个简单路由"><a href="#14-实现一个简单路由" class="headerlink" title="14. 实现一个简单路由"></a><strong>14. 实现一个简单路由</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Route</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="comment">// 路由存储对象</span></span><br><span class="line">    <span class="keyword">this</span>.routes = &#123;&#125;</span><br><span class="line">    <span class="comment">// 当前hash</span></span><br><span class="line">    <span class="keyword">this</span>.currentHash = <span class="string">''</span></span><br><span class="line">    <span class="comment">// 绑定this，避免监听时this指向改变</span></span><br><span class="line">    <span class="keyword">this</span>.freshRoute = <span class="keyword">this</span>.freshRoute.bind(<span class="keyword">this</span>)</span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="keyword">this</span>.freshRoute, <span class="literal">false</span>)</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, <span class="keyword">this</span>.freshRoute, <span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 存储</span></span><br><span class="line">  storeRoute (path, cb) &#123;</span><br><span class="line">    <span class="keyword">this</span>.routes[path] = cb || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 更新</span></span><br><span class="line">  freshRoute () &#123;</span><br><span class="line">    <span class="keyword">this</span>.currentHash = location.hash.slice(<span class="number">1</span>) || <span class="string">'/'</span></span><br><span class="line">    <span class="keyword">this</span>.routes[<span class="keyword">this</span>.currentHash]()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-实现懒加载"><a href="#15-实现懒加载" class="headerlink" title="15. 实现懒加载"></a><strong>15. 实现懒加载</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/default.png"</span> <span class="attr">data</span>=<span class="string">"./imgs/1.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/default.png"</span> <span class="attr">data</span>=<span class="string">"./imgs/2.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/default.png"</span> <span class="attr">data</span>=<span class="string">"./imgs/3.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/default.png"</span> <span class="attr">data</span>=<span class="string">"./imgs/4.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/default.png"</span> <span class="attr">data</span>=<span class="string">"./imgs/5.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/default.png"</span> <span class="attr">data</span>=<span class="string">"./imgs/6.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/default.png"</span> <span class="attr">data</span>=<span class="string">"./imgs/7.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/default.png"</span> <span class="attr">data</span>=<span class="string">"./imgs/8.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/default.png"</span> <span class="attr">data</span>=<span class="string">"./imgs/9.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/default.png"</span> <span class="attr">data</span>=<span class="string">"./imgs/10.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> imgs =  <span class="built_in">document</span>.querySelectorAll(<span class="string">'img'</span>)</span><br><span class="line"><span class="comment">// 可视区高度</span></span><br><span class="line"><span class="keyword">let</span> clientHeight = <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazyLoad</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 滚动卷去的高度</span></span><br><span class="line">  <span class="keyword">let</span> scrollTop = <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; imgs.length; i ++) &#123;</span><br><span class="line">    <span class="comment">// 得到图片顶部距离可视区顶部的距离</span></span><br><span class="line">    <span class="keyword">let</span> x = clientHeight + scrollTop - imgs[i].offsetTop</span><br><span class="line">    <span class="comment">// 图片在可视区内</span></span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; x &lt; clientHeight+imgs[i].height) &#123;</span><br><span class="line">      imgs[i].src = imgs[i].getAttribute(<span class="string">'data'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">setInterval(lazyLoad, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="16-rem实现原理"><a href="#16-rem实现原理" class="headerlink" title="16. rem实现原理"></a><strong>16. rem实现原理</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setRem</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> doc = <span class="built_in">document</span>.documentElement</span><br><span class="line">  <span class="keyword">let</span> width = doc.getBoundingClientRect().width</span><br><span class="line">  <span class="comment">// 假设设计稿为宽750，则rem为10px</span></span><br><span class="line">  <span class="keyword">let</span> rem = width / <span class="number">75</span></span><br><span class="line">  doc.style.fontSize = rem + <span class="string">'px'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="17-手写实现AJAX"><a href="#17-手写实现AJAX" class="headerlink" title="17. 手写实现AJAX"></a><strong>17. 手写实现AJAX</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 简单实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">xhr.open(method, url, <span class="keyword">async</span>)</span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">xhr.send(data)</span><br><span class="line"><span class="comment">// 设置状态变化回调处理请求结果</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyStatus === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseText)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 基于promise实现</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请求地址</span></span><br><span class="line">  <span class="keyword">const</span> url = options.url</span><br><span class="line">  <span class="comment">// 请求方法</span></span><br><span class="line">  <span class="keyword">const</span> method = options.method.toLocaleLowerCase() || <span class="string">'get'</span></span><br><span class="line">  <span class="comment">// 默认为异步true</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">async</span> = options.async</span><br><span class="line">  <span class="comment">// 请求参数</span></span><br><span class="line">  <span class="keyword">const</span> data = options.data</span><br><span class="line">  <span class="comment">// 实例化</span></span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  <span class="comment">// 请求超时</span></span><br><span class="line">  <span class="keyword">if</span> (options.timeout &amp;&amp; options.timeout &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    xhr.timeout = options.timeout</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回一个Promise实例</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    xhr.ontimeout = <span class="function"><span class="params">()</span> =&gt;</span> reject &amp;&amp; reject(<span class="string">'请求超时'</span>)</span><br><span class="line">    <span class="comment">// 监听状态变化回调</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="comment">// 200-300 之间表示请求成功，304资源未变，取缓存</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">          resolve &amp;&amp; resolve(xhr.responseText)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          reject &amp;&amp; reject()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 错误回调</span></span><br><span class="line">    xhr.onerror = <span class="function"><span class="params">err</span> =&gt;</span> reject &amp;&amp; reject(err)</span><br><span class="line">    <span class="keyword">let</span> paramArr = []</span><br><span class="line">    <span class="keyword">let</span> encodeData</span><br><span class="line">    <span class="comment">// 处理请求参数</span></span><br><span class="line">    <span class="keyword">if</span> (data <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">        <span class="comment">// 参数拼接需要通过 encodeURIComponent 进行编码</span></span><br><span class="line">        paramArr.push(<span class="built_in">encodeURIComponent</span>(key) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(data[key]))</span><br><span class="line">      &#125;</span><br><span class="line">      encodeData = paramArr.join(<span class="string">'&amp;'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get请求拼接参数</span></span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">'get'</span>) &#123;</span><br><span class="line">      <span class="comment">// 检测url中是否已存在 ? 及其位置</span></span><br><span class="line">      <span class="keyword">const</span> index = url.indexOf(<span class="string">'?'</span>)</span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">-1</span>) url += <span class="string">'?'</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (index !== url.length <span class="number">-1</span>) url += <span class="string">'&amp;'</span></span><br><span class="line">      <span class="comment">// 拼接url</span></span><br><span class="line">      url += encodeData</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    xhr.open(method, url, <span class="keyword">async</span>)</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">'get'</span>) xhr.send(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// post 方式需要设置请求头</span></span><br><span class="line">      xhr.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>)</span><br><span class="line">      xhr.send(encodeData)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="18-实现拖拽"><a href="#18-实现拖拽" class="headerlink" title="18. 实现拖拽"></a><strong>18. 实现拖拽</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// drag处于绝对定位状态</span></span><br><span class="line">  <span class="keyword">let</span> drag = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>)</span><br><span class="line">  drag.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event</span><br><span class="line">    <span class="comment">// 鼠标与拖拽元素边界的距离 = 鼠标与可视区边界的距离 - 拖拽元素与边界的距离</span></span><br><span class="line">    <span class="keyword">let</span> diffX = e.clientX - drag.offsetLeft</span><br><span class="line">    <span class="keyword">let</span> diffY = e.clientY - drag.offsetTop</span><br><span class="line">    drag.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 拖拽元素移动的距离 = 鼠标与可视区边界的距离 - 鼠标与拖拽元素边界的距离</span></span><br><span class="line">      <span class="keyword">let</span> left = e.clientX - diffX</span><br><span class="line">      <span class="keyword">let</span> top = e.clientY - diffY</span><br><span class="line">      <span class="comment">// 避免拖拽出可视区</span></span><br><span class="line">      <span class="keyword">if</span> (left &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left &gt; <span class="built_in">window</span>.innerWidth - drag.offsetWidth) &#123;</span><br><span class="line">        left = <span class="built_in">window</span>.innerWidth - drag.offsetWidth</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (top &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        top = <span class="number">0</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (top &gt; <span class="built_in">window</span>.innerHeight - drag.offsetHeight) &#123;</span><br><span class="line">        top = <span class="built_in">window</span>.innerHeight - drag.offsetHeight</span><br><span class="line">      &#125;</span><br><span class="line">      drag.style.left = left + <span class="string">'px'</span></span><br><span class="line">      drag.style.top = top + <span class="string">'px'</span></span><br><span class="line">    &#125;</span><br><span class="line">    drag.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.onmousemove = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">this</span>.onmouseup = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="19-实现一个节流函数"><a href="#19-实现一个节流函数" class="headerlink" title="19. 实现一个节流函数"></a><strong>19. 实现一个节流函数</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span> (<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 利用闭包保存时间</span></span><br><span class="line">  <span class="keyword">let</span> prev = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> arg = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">let</span> now = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="keyword">if</span> (now - prev &gt;= delay) &#123;</span><br><span class="line">      fn.apply(context, arg)</span><br><span class="line">      prev = <span class="built_in">Date</span>.now()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'节流'</span>)</span><br><span class="line">&#125;</span><br><span class="line">addEventListener(<span class="string">'scroll'</span>, throttle(fn, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure><h2 id="20-实现一个防抖函数"><a href="#20-实现一个防抖函数" class="headerlink" title="20. 实现一个防抖函数"></a><strong>20. 实现一个防抖函数</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span> (<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 利用闭包保存定时器</span></span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> arg = <span class="built_in">arguments</span></span><br><span class="line">    <span class="comment">// 在规定时间内再次触发会先清除定时器后再重设定时器</span></span><br><span class="line">    clearTimeout(timer)</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      fn.apply(context, arg)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'防抖'</span>)</span><br><span class="line">&#125;</span><br><span class="line">addEventListener(<span class="string">'scroll'</span>, debounce(fn, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure><p>作者：陈煜仑</p><p><a href="https://juejin.im/post/5d2ee123e51d4577614761f8" target="_blank" rel="noopener">https://juejin.im/post/5d2ee123e51d4577614761f8</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网上无意发现一篇好文，对于目前常见的面试题，实现了相应方法的核心原理。&lt;/p&gt;
&lt;p&gt;特此码住收藏！&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript中数组对象常用方法</title>
    <link href="http://liuzhinan.com/2019/07/19/JavaScript%E4%B8%AD%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://liuzhinan.com/2019/07/19/JavaScript中数组对象常用方法/</id>
    <published>2019-07-19T08:15:56.000Z</published>
    <updated>2019-07-19T08:36:04.431Z</updated>
    
    <content type="html"><![CDATA[<p>目的很简单，主要回顾下javascript里面Array常用的一些属性以及方法，虽然经常使用，但其实一些细节没有注意到，总是等到用到的时候再去查有点浪费时间，因此总结了下加深印象</p><a id="more"></a><h2 id="不改变原数组的方法："><a href="#不改变原数组的方法：" class="headerlink" title="不改变原数组的方法："></a>不改变原数组的方法：</h2><p>1.<code>indexOf()</code> 和<code>lastIndexOf()</code></p><p>1.1 <code>indexOf()</code> : 返回元素在数组的索引，从<code>0</code>开始。若数组不存在该元素，则返回<code>-1</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr.indexOf(<span class="number">1</span>); <span class="comment">// 0</span></span><br><span class="line">arr.indexOf(<span class="number">10</span>); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><p>1.2 <code>lastIndexOf()</code>:<br> 返回元素在数组中最后一次出现的索引，如果没有出现则返回-1.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>];</span><br><span class="line">arr.lastIndexOf(<span class="number">2</span>); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>2.<code>slice()</code>: 与<code>字符串</code>的<code>substring()</code>方法一样，截取数组的一部分，返回一个新的数组。</p><p>2.1 通常，接受2个参数作为一个左闭右开区间，即包括开始索引位置的元素，但不包括结束索引位置的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">arr.slice(<span class="number">0</span>,<span class="number">2</span>)    <span class="comment">// [1, 2] 只返回索引0,1位置的元素</span></span><br></pre></td></tr></table></figure><p>2.2 可以省略第二个参数，即截取到原数组的最后一个元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.slice(<span class="number">2</span>,);    <span class="comment">// [3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><p>2.3 如果没有传参数，则返回一个从头到尾截取所有元素的新数组。可以用来复制一个数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> copyArr = arr.slice();</span><br><span class="line">copyArr;   <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><p>3.<code>concat()</code>: 合并数组。把当前的数组和另一个数组连接起来，并返回一个新的数组。</p><p>3.1 <code>concat()</code>方法的参数可以有多个，也可以任意任意类型，<code>数值</code>、<code>字符串</code>、<code>布尔值</code>、<code>数组</code>、<code>对象</code> 都可以，参数会被被添加到新的数组中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = arr1.concat(arr2);</span><br><span class="line">arr3;   <span class="comment">// [1, 2, 3, 4, 5, 6, "a", "b", "c"]</span></span><br></pre></td></tr></table></figure><p>3.2 注意，如果参数是<code>数组</code>, 会被拉平一次，即数组会被拆开来，加入到新的数组中。具体看示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1.concat(<span class="number">66</span>,<span class="string">'abc'</span>,<span class="literal">true</span>,[<span class="number">10</span>,<span class="number">20</span>],[<span class="number">30</span>,[<span class="number">31</span>,<span class="number">32</span>]],&#123;<span class="attr">x</span>:<span class="number">100</span>&#125;);</span><br><span class="line">arr2;  <span class="comment">// [1, 2, 3, 66, "abc", true, 10, 20, 30, [31,32], &#123;x:100&#125;]</span></span><br></pre></td></tr></table></figure><p>4.<code>join()</code>: 转成字符串。它会把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串。</p><p>4.1 参数是用来指定连接的字符串。见示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.join(<span class="string">'*'</span>)   <span class="comment">// "1*2*3"</span></span><br></pre></td></tr></table></figure><p>4.2 如果没有指定参数，默认是用<code>,</code>连接。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.join()   <span class="comment">// "1,2,3"</span></span><br></pre></td></tr></table></figure><p>5.<code>toString()</code>: 返回数组的字符串形式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.toString() <span class="comment">// "1,2,3"</span></span><br></pre></td></tr></table></figure><p>6.<code>valueOf()</code>:返回数组本身</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.valueOf() <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>7.<code>map()</code>:</p><p>7.1 对数组的所有成员<code>依次调用一个函数</code>，返回值是一个新数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> elem*<span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [2, 4, 6, 8]</span></span><br><span class="line">arr; <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>7.2 <code>map</code>方法接受一个函数作为参数,该函数调用时，map方法会将其传入3个参数，分别是当前成员、当前位置和数组本身(后2个参数可选)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javascriptarr.map(<span class="function"><span class="keyword">function</span>(<span class="params">elem, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> elem * index;</span><br><span class="line">&#125;); </span><br><span class="line"><span class="comment">// [0, 2, 6]</span></span><br></pre></td></tr></table></figure><p>7.3 <code>map</code>方法还可以接受第2个参数，表示回调函数执行时<code>this</code>所指向的对象。</p><p>8.<code>forEach()</code>: 与map方法很相似，也是遍历数组的所有成员，执行某种操作。<strong>注意</strong>：<code>forEach</code>方法一般没有返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'['</span> + index + <span class="string">'] = '</span> + element);</span><br><span class="line">&#125;</span><br><span class="line">arr.forEach(log);</span><br><span class="line"><span class="comment">// [0] = 1</span></span><br><span class="line"><span class="comment">// [1] = 2</span></span><br><span class="line"><span class="comment">// [2] = 3</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>: <code>forEach</code>方法无法中断执行，总是会将所有成员遍历完。如果希望符合某种条件时，就中断遍历，要使用<code>for循环</code>。</p><p>9.<code>filter()</code>:</p><p>9.1 筛选数组的元素，返回值是符合筛选条件元素组成的一个新数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">elem</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (elem &gt; <span class="number">3</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [4, 5]</span></span><br></pre></td></tr></table></figure><p>9.2 <code>filter</code>方法接受一个函数作为参数,该函数调用时，<code>fitler</code>方法会将其传入3个参数，分别是当前成员、当前位置和数组本身(后2个参数可选)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">elem, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> index % <span class="number">2</span> === <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [2, 4]</span></span><br></pre></td></tr></table></figure><p>9.3 <code>filter</code>方法还可以接受第2个参数，指定测试函数所在的<code>上下文对象</code>（即<code>this对象</code>）。</p><p>10.<code>some()</code>和<code>every()</code>: 类似“断言”（assert），用来判断数组成员是否符合某种条件。</p><p>10.1 接受一个函数作为参数，所有数组成员依次执行该函数，返回一个<code>布尔值</code>。该函数接受三个参数，依次是当前位置的成员、当前位置的序号和整个数组。</p><p>10.2 <code>some</code>方法是只要有一个数组成员的返回值是true，则整个some方法的返回值就是true，否则false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.some(<span class="function"><span class="keyword">function</span> (<span class="params">elem, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> elem &gt;= <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>10.3 <code>every</code>方法则是所有数组成员的返回值都是true，才返回true，否则false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.every(<span class="function"><span class="keyword">function</span> (<span class="params">elem, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> elem &gt;= <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>10.4 注意，对于<code>空数组</code>，<code>some</code>方法返回false，<code>every</code>方法返回true</p><p>10.5 <code>some</code>和<code>every</code>方法还可以接受第2个参数，用来绑定函数中的<code>this关键字</code>。</p><p>11.<code>reduce()</code>和<code>reduceRight()</code>: 依次处理数组的每个成员，最终累计为一个值。</p><p>11.1<code>reduce</code>是<code>从左到右</code>处理（从第一个成员到最后一个成员）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y)</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 1 2</span></span><br><span class="line"><span class="comment">// 3 3</span></span><br><span class="line"><span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>11.2<code>reduceRight</code>则是<code>从右到左</code>处理（从最后一个成员到第一个成员）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr.reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y)</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 3 2</span></span><br><span class="line"><span class="comment">// 5 1</span></span><br><span class="line"><span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h2 id="改变原数组的方法："><a href="#改变原数组的方法：" class="headerlink" title="改变原数组的方法："></a>改变原数组的方法：</h2><p>1.<code>push()</code>: 向数组的末尾添加若干元素。返回值是改变后的数组长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr.push(<span class="number">3</span>) ;<span class="comment">// 3</span></span><br><span class="line">arr; <span class="comment">// [1, 2, 3]</span></span><br><span class="line">arr.push(<span class="string">'b'</span>,<span class="string">'c'</span>); <span class="comment">//5</span></span><br><span class="line">arr; <span class="comment">// [1, 2, 3, "b", "c"]</span></span><br><span class="line">arr.push([<span class="number">10</span>,<span class="number">20</span>]); <span class="comment">//6</span></span><br><span class="line">arr; <span class="comment">// [1, 2, 3, "b", "c", [10,20]]</span></span><br></pre></td></tr></table></figure><p>2.<code>pop()</code>: 删除数组最后一个元素。返回值是删除的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr =[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, [<span class="number">10</span>,<span class="number">20</span>]];</span><br><span class="line">arr.pop(); <span class="comment">// [10, 20]</span></span><br><span class="line">arr;  <span class="comment">// [1, 2, 3, "b", "c"]</span></span><br></pre></td></tr></table></figure><p>3.<code>unshift()</code>: 向数组头部添加若干元素。返回值是改变后的数组长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr.unshift(<span class="number">3</span>,<span class="number">4</span> );  <span class="comment">// 4</span></span><br><span class="line">arr;  <span class="comment">// [3, 4, 1, 2]</span></span><br></pre></td></tr></table></figure><p>4.<code>shift()</code>: 删除数组最后一个元素。返回值是删除的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr.shift(); <span class="comment">// 'a'</span></span><br><span class="line">arr;  <span class="comment">// ['b', 1, 2]</span></span><br></pre></td></tr></table></figure><p>5.<code>sort()</code>: 数组排序。</p><p>5.1 <strong>注意</strong>：默认是将所有元素转换成<code>字符串</code>，再按<code>字符串Unicode码点</code>排序。返回值是新的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'ab'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>]</span><br><span class="line">arr.sort();  <span class="comment">// [1, 12, 2, "A", "B", "a", "ab", "b"] 注意：12排在了2的前面</span></span><br></pre></td></tr></table></figure><p>5.2 如果元素都是<code>数字</code>，要按<code>从小到大</code>排序，可以传入一个回调函数作为参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [1, 2, 12, 100]</span></span><br></pre></td></tr></table></figure><p>5.3 如果想要<code>从大到小</code>排序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b-a;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [100, 12, 2, 1]</span></span><br></pre></td></tr></table></figure><p>6.<code>reverse()</code>: 颠倒数组中元素的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'ab'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>];</span><br><span class="line">arr.reverse();</span><br><span class="line"><span class="comment">// ["B", "A", "ab", "b", "a", 12, 2, 1]</span></span><br></pre></td></tr></table></figure><p>7.<code>splice()</code>: 修改数组元素（新增、删减、替换）。从<code>指定的索引</code>开始删除<code>若干个</code>元素，然后再从该位置添加<code>若干个元素</code>。返回值是删除的元素组成的数组。参数1是删除元素的起始索引，参数2是删除的元素个数，之后的参数为待添加的元素。</p><p>7.1 只删除,不添加。可以传入2个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'Alibaba'</span>, <span class="string">'Tencent'</span>, <span class="string">'Baidu'</span>, <span class="string">'XiaoMi'</span>, <span class="string">'360'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从索引2开始删除3个元素</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 返回删除的元素 ['Baidu', 'XiaoMi', '360']</span></span><br><span class="line">arr; <span class="comment">// ['Alibaba', 'Tencent']</span></span><br></pre></td></tr></table></figure><p>7.2 只添加,不删除。第2个参数设为<code>0</code>，即不删除元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">'Toutiao'</span>, <span class="string">'Meituan'</span>, <span class="string">'Didi'</span>); <span class="comment">// 返回[],因为没有删除任何元素</span></span><br><span class="line">arr; <span class="comment">// ["Alibaba", "Tencent", "Toutiao", "Meituan", "Didi"]</span></span><br></pre></td></tr></table></figure><p>7.3 先删除若干元素，然后在删除的位置上在添加若干个元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  arr =[<span class="string">"Alibaba"</span>, <span class="string">"Tencent"</span>, <span class="string">"Toutiao"</span>, <span class="string">"Meituan"</span>, <span class="string">"Didi"</span>]</span><br><span class="line">arr.splice(<span class="number">2</span>,<span class="number">2</span>,<span class="string">'Apple'</span>,<span class="string">'Google'</span>);  <span class="comment">// ["Toutiao", "Meituan"]</span></span><br><span class="line">arr; <span class="comment">// ["Alibaba", "Tencent", "Apple", "Google", "Didi"]</span></span><br></pre></td></tr></table></figure><h2 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a><code>Array.isArray()</code></h2><p>用来判断一个值是否为数组, 如果参数为数组，返回true，否则，返回false.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">Array</span>.isArray(arr);  <span class="comment">// true;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="string">'a'</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目的很简单，主要回顾下javascript里面Array常用的一些属性以及方法，虽然经常使用，但其实一些细节没有注意到，总是等到用到的时候再去查有点浪费时间，因此总结了下加深印象&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript中字符串对象常用方法</title>
    <link href="http://liuzhinan.com/2019/07/18/JavaScript%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%B9%E8%B1%A1%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://liuzhinan.com/2019/07/18/JavaScript中字符串对象常用方法/</id>
    <published>2019-07-18T08:28:44.000Z</published>
    <updated>2019-07-19T01:58:07.489Z</updated>
    
    <content type="html"><![CDATA[<p>Strong对象用于处理字符串，但作为在前端路上爬行的小鸟时常会忘记一些方法，写这篇文章的主要目的是可以方便查看和增加记忆。</p><a id="more"></a><h3 id="数字转转字符串的方法"><a href="#数字转转字符串的方法" class="headerlink" title="数字转转字符串的方法:"></a>数字转转字符串的方法:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  number=<span class="number">0</span>;  <span class="comment">// 数字类型</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(number))  <span class="comment">// '0'  字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">String</span>(number))  <span class="comment">// [String: '0']  对象形式</span></span><br></pre></td></tr></table></figure><h3 id="静态-String-fromCharCode-方法返回使用指定的Unicode值序-列创建的字符串。"><a href="#静态-String-fromCharCode-方法返回使用指定的Unicode值序-列创建的字符串。" class="headerlink" title="静态 String.fromCharCode() 方法返回使用指定的Unicode值序 列创建的字符串。"></a>静态 String.fromCharCode() 方法返回使用指定的Unicode值序 列创建的字符串。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">65</span>,<span class="number">66</span>,<span class="number">67</span>)) <span class="comment">// 'ABC'</span></span><br></pre></td></tr></table></figure><h3 id="String-fromCodePoint-静态方法返回使用指定的代码点序列创建的字符串。"><a href="#String-fromCodePoint-静态方法返回使用指定的代码点序列创建的字符串。" class="headerlink" title="String.fromCodePoint() 静态方法返回使用指定的代码点序列创建的字符串。"></a>String.fromCodePoint() 静态方法返回使用指定的代码点序列创建的字符串。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.fromCodePoint(<span class="number">65</span>, <span class="number">90</span>); <span class="comment">// "AZ"</span></span><br></pre></td></tr></table></figure><h3 id="charAt-方法从一个字符串中返回指定的字符。"><a href="#charAt-方法从一个字符串中返回指定的字符。" class="headerlink" title="charAt() 方法从一个字符串中返回指定的字符。"></a>charAt() 方法从一个字符串中返回指定的字符。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span>.charAt(<span class="number">3</span>)) <span class="comment">// 'l'</span></span><br></pre></td></tr></table></figure><h3 id="charCodeAt-查找字符串下标并返回unicode-值序"><a href="#charCodeAt-查找字符串下标并返回unicode-值序" class="headerlink" title="charCodeAt() 查找字符串下标并返回unicode 值序"></a>charCodeAt() 查找字符串下标并返回unicode 值序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"ABC"</span>.charCodeAt(<span class="number">0</span>)) <span class="comment">// returns 65</span></span><br></pre></td></tr></table></figure><h3 id="codePointAt-方法返回-一个-Unicode-编码点值的非负整数。"><a href="#codePointAt-方法返回-一个-Unicode-编码点值的非负整数。" class="headerlink" title="codePointAt() 方法返回 一个 Unicode 编码点值的非负整数。"></a>codePointAt() 方法返回 一个 Unicode 编码点值的非负整数。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"ABC"</span>.codePointAt(<span class="number">0</span>)) <span class="comment">// returns 65</span></span><br></pre></td></tr></table></figure><h3 id="concat-方法将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。"><a href="#concat-方法将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。" class="headerlink" title="concat()方法将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。"></a>concat()方法将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(hello.concat(<span class="string">' word'</span>,<span class="string">'!'</span>)); <span class="comment">// 'hello word!''</span></span><br></pre></td></tr></table></figure><h3 id="endsWith-判断字符串结尾是否以指定的字符串结尾"><a href="#endsWith-判断字符串结尾是否以指定的字符串结尾" class="headerlink" title="endsWith()判断字符串结尾是否以指定的字符串结尾"></a>endsWith()判断字符串结尾是否以指定的字符串结尾</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">endsWith(searchString,position)</span><br><span class="line">searchString 为制定的字符串</span><br><span class="line">position 搜索截止的下标，没有填写即为字符串length</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"To be, or not to be, that is the question."</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.endsWith(<span class="string">"question."</span>) );  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log( str.endsWith(<span class="string">"to be"</span>) );      <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="includes-方法用于判断一个字符串是否包含在另一个字符串中，根据情况返回true或false。"><a href="#includes-方法用于判断一个字符串是否包含在另一个字符串中，根据情况返回true或false。" class="headerlink" title="includes() 方法用于判断一个字符串是否包含在另一个字符串中，根据情况返回true或false。"></a>includes() 方法用于判断一个字符串是否包含在另一个字符串中，根据情况返回true或false。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'Blue Whale'</span>.includes(<span class="string">'blue'</span>));  <span class="comment">// false 区分大小写</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Blue Whale'</span>.includes(<span class="string">'Blue'</span>));  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="indexOf-searchValue-fromIndex-在字符串中查找searchValue第一次出现的index，fromIndex默认为0，开始搜索的位置"><a href="#indexOf-searchValue-fromIndex-在字符串中查找searchValue第一次出现的index，fromIndex默认为0，开始搜索的位置" class="headerlink" title="indexOf(searchValue,fromIndex) //在字符串中查找searchValue第一次出现的index，fromIndex默认为0，开始搜索的位置"></a>indexOf(searchValue,fromIndex) //在字符串中查找searchValue第一次出现的index，fromIndex默认为0，开始搜索的位置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Blue Whale"</span>.indexOf(<span class="string">"Whale"</span>, <span class="number">5</span>));   <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Blue Whale"</span>.indexOf(<span class="string">"Whale"</span>, <span class="number">12</span>));  <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h3 id="lastIndexOf-searchValue-fromIndex-方法返回指定值在调用该方法的字符串中最后出现的位置，如果没找到则返回-1"><a href="#lastIndexOf-searchValue-fromIndex-方法返回指定值在调用该方法的字符串中最后出现的位置，如果没找到则返回-1" class="headerlink" title="lastIndexOf(searchValue,fromIndex) 方法返回指定值在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1"></a>lastIndexOf(searchValue,fromIndex) 方法返回指定值在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"canal"</span>.lastIndexOf(<span class="string">"a"</span>))  <span class="comment">// returns 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"canal"</span>.lastIndexOf(<span class="string">"a"</span>,<span class="number">7</span>))  <span class="comment">// returns 3</span></span><br></pre></td></tr></table></figure><h3 id="match-当一个字符串与一个正则表达式匹配时，-match-方法检索匹配项。"><a href="#match-当一个字符串与一个正则表达式匹配时，-match-方法检索匹配项。" class="headerlink" title="match() 当一个字符串与一个正则表达式匹配时， match()方法检索匹配项。"></a>match() 当一个字符串与一个正则表达式匹配时， match()方法检索匹配项。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> match = <span class="string">'For more information, see Chapter 3.4.5.1'</span>;</span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/see (chapter \d+(\.\d)*)/i</span>;</span><br><span class="line"><span class="keyword">var</span> found = match.match(re);</span><br><span class="line"><span class="built_in">console</span>.log(found);  </span><br><span class="line"><span class="comment">// [ 'see Chapter 3.4.5.1',</span></span><br><span class="line"><span class="comment">// 'Chapter 3.4.5.1',</span></span><br><span class="line"><span class="comment">// '.1',</span></span><br><span class="line"><span class="comment">// index: 22,</span></span><br><span class="line"><span class="comment">// input: 'For more information, see Chapter 3.4.5.1' ]</span></span><br></pre></td></tr></table></figure><h3 id="es6-padEnd-方法会用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。"><a href="#es6-padEnd-方法会用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。" class="headerlink" title="es6 padEnd() 方法会用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。"></a>es6 padEnd() 方法会用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'abc'</span>.padEnd(<span class="number">10</span>));          <span class="comment">// "abc       " 长度为10</span></span><br><span class="line"><span class="string">'abc'</span>.padEnd(<span class="number">10</span>, <span class="string">"foo"</span>);   <span class="comment">// "abcfoofoof"  //长度为10</span></span><br><span class="line"><span class="string">'abc'</span>.padEnd(<span class="number">6</span>, <span class="string">"123456"</span>); <span class="comment">// "abc123" 长度为6</span></span><br></pre></td></tr></table></figure><h3 id="es6-padStart-方法用另一个字符串填充当前字符串-重复，如果需要的话-，以便产生的字符串达到给定的长度。填充从当前字符串的开始-左侧-应用的。"><a href="#es6-padStart-方法用另一个字符串填充当前字符串-重复，如果需要的话-，以便产生的字符串达到给定的长度。填充从当前字符串的开始-左侧-应用的。" class="headerlink" title="es6 padStart() 方法用另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(左侧)应用的。"></a>es6 padStart() 方法用另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(左侧)应用的。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">10</span>);         <span class="comment">// "       abc"  长度为10</span></span><br><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">10</span>, <span class="string">"foo"</span>);  <span class="comment">// "foofoofabc"</span></span><br><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">6</span>,<span class="string">"123465"</span>); <span class="comment">// "123abc"</span></span><br></pre></td></tr></table></figure><h3 id="repeat-构建并返回一个新字符串，"><a href="#repeat-构建并返回一个新字符串，" class="headerlink" title="repeat()构建并返回一个新字符串，"></a>repeat()构建并返回一个新字符串，</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'abcd'</span>.repeat(<span class="number">2</span>));   <span class="comment">// abcdabcd</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'abcd'</span>.repeat(<span class="number">0</span>)); <span class="comment">// ''</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'abcd'</span>.repeat(<span class="number">3.5</span>)); <span class="comment">// abcdabcdabcd 小数会进行一个求余转整数</span></span><br></pre></td></tr></table></figure><h3 id="replace-匹配元素替换"><a href="#replace-匹配元素替换" class="headerlink" title="replace() 匹配元素替换"></a>replace() 匹配元素替换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'hi word'</span>.replace(<span class="string">'hi'</span>,<span class="string">'hello'</span>)) <span class="comment">// hello word</span></span><br></pre></td></tr></table></figure><h3 id="search-方法执行正则表达式和-String对象之间的一个搜索匹配。"><a href="#search-方法执行正则表达式和-String对象之间的一个搜索匹配。" class="headerlink" title="search() 方法执行正则表达式和 String对象之间的一个搜索匹配。"></a>search() 方法执行正则表达式和 String对象之间的一个搜索匹配。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'abc'</span>.search(<span class="string">'b'</span>)) <span class="comment">// 下标为1</span></span><br></pre></td></tr></table></figure><h3 id="slice-beginSlice，endSlice-方法提取一个字符串的一部分，并返回新的字符串"><a href="#slice-beginSlice，endSlice-方法提取一个字符串的一部分，并返回新的字符串" class="headerlink" title="slice(beginSlice，endSlice) 方法提取一个字符串的一部分，并返回新的字符串"></a>slice(beginSlice，endSlice) 方法提取一个字符串的一部分，并返回新的字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'abc'</span>.slice(<span class="number">1</span>,<span class="number">3</span>)) <span class="comment">// bc</span></span><br></pre></td></tr></table></figure><h3 id="split-把字符串根据符号改为数组"><a href="#split-把字符串根据符号改为数组" class="headerlink" title="split();把字符串根据符号改为数组"></a>split();把字符串根据符号改为数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello word'</span>.split(<span class="string">''</span>)); <span class="comment">// [ 'h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'd' ]</span></span><br></pre></td></tr></table></figure><h3 id="es6-startsWith-searchString，position-判断字符串开始是否以指定字符串"><a href="#es6-startsWith-searchString，position-判断字符串开始是否以指定字符串" class="headerlink" title="es6 startsWith(searchString，position) 判断字符串开始是否以指定字符串"></a>es6 startsWith(searchString，position) 判断字符串开始是否以指定字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">searchString 指定字符串</span><br><span class="line">position 开始的位置  默认为<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> sWith=<span class="string">'To be, or not to be, that is the question.'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(sWith.startsWith(<span class="string">'To'</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(sWith.startsWith(<span class="string">'to'</span>)) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="substr-方法返回一个字符串中从指定位置开始到指定字符数的字符。"><a href="#substr-方法返回一个字符串中从指定位置开始到指定字符数的字符。" class="headerlink" title="substr() 方法返回一个字符串中从指定位置开始到指定字符数的字符。"></a>substr() 方法返回一个字符串中从指定位置开始到指定字符数的字符。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello word'</span>.substr(<span class="number">1</span>,<span class="number">2</span>)) <span class="comment">// el</span></span><br></pre></td></tr></table></figure><h3 id="substring-方法返回一个字符串在开始索引到结束索引之间的一个子集-或从开始索引直到字符串的末尾的一个子集。"><a href="#substring-方法返回一个字符串在开始索引到结束索引之间的一个子集-或从开始索引直到字符串的末尾的一个子集。" class="headerlink" title="substring() 方法返回一个字符串在开始索引到结束索引之间的一个子集, 或从开始索引直到字符串的末尾的一个子集。"></a>substring() 方法返回一个字符串在开始索引到结束索引之间的一个子集, 或从开始索引直到字符串的末尾的一个子集。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anyString = <span class="string">"Mozilla"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(anyString.substring(<span class="number">0</span>,<span class="number">3</span>)); <span class="comment">// Moz</span></span><br><span class="line"><span class="built_in">console</span>.log(anyString.substring(<span class="number">3</span>,<span class="number">0</span>)); <span class="comment">// Moz</span></span><br></pre></td></tr></table></figure><h3 id="toLocaleLowerCase-字符串转换为小写"><a href="#toLocaleLowerCase-字符串转换为小写" class="headerlink" title="toLocaleLowerCase() 字符串转换为小写"></a>toLocaleLowerCase() 字符串转换为小写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'ALPHABET'</span>.toLocaleLowerCase()); <span class="comment">// alphabet</span></span><br></pre></td></tr></table></figure><h3 id="toLocaleUpperCase-字符串转换为大小写"><a href="#toLocaleUpperCase-字符串转换为大小写" class="headerlink" title="toLocaleUpperCase() 字符串转换为大小写"></a>toLocaleUpperCase() 字符串转换为大小写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'alphabet'</span>.toLocaleUpperCase()); <span class="comment">// ALPHABET</span></span><br></pre></td></tr></table></figure><h3 id="toLowerCase-转换为小写"><a href="#toLowerCase-转换为小写" class="headerlink" title="toLowerCase() 转换为小写"></a>toLowerCase() 转换为小写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'ALPHABET'</span>.toLowerCase()); <span class="comment">// alphabet</span></span><br></pre></td></tr></table></figure><h3 id="toUpperCase-转换为大写"><a href="#toUpperCase-转换为大写" class="headerlink" title="toUpperCase()转换为大写"></a>toUpperCase()转换为大写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'alphabet'</span>.toUpperCase()) <span class="comment">// ALPHABET</span></span><br></pre></td></tr></table></figure><h3 id="trim-去除字符串两边的空格"><a href="#trim-去除字符串两边的空格" class="headerlink" title="trim()去除字符串两边的空格"></a>trim()去除字符串两边的空格</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">' hello '</span>.trim()); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure><h3 id="valueOf-返回一个string对象-的原始值"><a href="#valueOf-返回一个string对象-的原始值" class="headerlink" title="valueOf() 返回一个string对象 的原始值"></a>valueOf() 返回一个string对象 的原始值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> string=<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello word'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(string); <span class="comment">// [String: 'hello word']</span></span><br><span class="line"><span class="built_in">console</span>.log(string.valueOf()); <span class="comment">// hello word</span></span><br></pre></td></tr></table></figure><h3 id="raw-是一个模板字符串的标签函数"><a href="#raw-是一个模板字符串的标签函数" class="headerlink" title="raw() 是一个模板字符串的标签函数"></a>raw() 是一个模板字符串的标签函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name=<span class="string">'xiaozhang'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`hello <span class="subst">$&#123;name&#125;</span>`</span>); <span class="comment">// hello xiaozhang</span></span><br></pre></td></tr></table></figure><h3 id="常用的转义符号"><a href="#常用的转义符号" class="headerlink" title="常用的转义符号"></a>常用的转义符号</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\<span class="number">0</span>    空字符</span><br><span class="line">\<span class="string">'    单引号</span></span><br><span class="line"><span class="string">\"    双引号</span></span><br><span class="line"><span class="string">\\    反斜杠</span></span><br><span class="line"><span class="string">\n    换行</span></span><br><span class="line"><span class="string">\r    回车</span></span><br><span class="line"><span class="string">\v    垂直制表符</span></span><br><span class="line"><span class="string">\t    水平制表符</span></span><br><span class="line"><span class="string">\b    退格</span></span><br><span class="line"><span class="string">\f    换页</span></span><br><span class="line"><span class="string">\uXXXX    unicode 码</span></span><br><span class="line"><span class="string">\u&#123;X&#125; ... \u&#123;XXXXXX&#125;    unicode codepoint </span></span><br><span class="line"><span class="string">\xXX    Latin-1 字符(x小写)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Strong对象用于处理字符串，但作为在前端路上爬行的小鸟时常会忘记一些方法，写这篇文章的主要目的是可以方便查看和增加记忆。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>var、let和const的区别</title>
    <link href="http://liuzhinan.com/2019/07/15/var%E3%80%81let%E5%92%8Cconst%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://liuzhinan.com/2019/07/15/var、let和const的区别/</id>
    <published>2019-07-15T06:19:50.000Z</published>
    <updated>2019-07-16T01:53:49.337Z</updated>
    
    <content type="html"><![CDATA[<p>随着ES6规范的到来，JavaScript中定义变量的方法已经由单一的 var 方式发展到了 var、let、const 三种之多，var众所周知，可那俩新来的哥们到底有啥新特性？到底该啥时用？</p><a id="more"></a><h3 id="var存在的两个bug"><a href="#var存在的两个bug" class="headerlink" title="var存在的两个bug"></a>var存在的两个bug</h3><p>1.js没有块级作用域</p><ul><li>通过 var 声明的变量，其作用域是函数的全部</li></ul><p>2.循环内变量会过度共享</p><ul><li>在循环内部定义的变量，在循环外部依旧可以访问</li></ul><h3 id="let存在的意义"><a href="#let存在的意义" class="headerlink" title="let存在的意义"></a>let存在的意义</h3><p>1.let声明的变量拥有块级作用域</p><ul><li>let声明的变量其作用域只是外层块，而不是外层函数</li></ul><p>2.let声明的全局变量不是全局对象的属性</p><ul><li>通过let声明的全局变量无法通过window.变量名进行访问，其只存在于一个相对的作用域中</li></ul><p>3.形如 <code>for(let x in data)</code> 的循环在每次迭代时都会为 <code>x</code> 创建新的绑定</p><p>4.let声明的变量无法重新被定义</p><p>5.let变量在声明前无法被调用</p><ul><li><p>这个比较基于花括号包裹的作用域中声明了变量name ，所以JS编译器会根据ES6规定的 <strong>变量在声明之前无法使用</strong> 抛出错误</p></li><li><p>var声明的变量可以被使用是因为存在 <strong>变量提升</strong><br>if (true) {<br>  name = ‘abc’ // name is no defined<br>  let name<br>}</p><p>if (true) { </p><pre><code>name = ‘abc’ console.log(name) // abc var name </code></pre><p>}</p></li></ul><h3 id="const的作用"><a href="#const的作用" class="headerlink" title="const的作用"></a>const的作用</h3><p>1.const就是用于定义常量的，常量（不会改变的变量）有以下特点</p><ul><li>声明时必须赋值</li><li>赋值后不可以改变</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如 const 声明了一个复合类型的常量，其存储的是一个引用地址，不允许改变的是这个地址，而对象本身是可变的。</span><br></pre></td></tr></table></figure><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>var 和 let 用以声明变量，const 用于声明只读的常量；</li><li>var 声明的变量，不存在块级作用域，在全局范围内都有效，let 和 const 声明的，只在它所在的代码块内有效；</li><li>let 和 const 不存在像 var 那样的 <a href="https://www.jianshu.com/p/d4b88723cd12" target="_blank" rel="noopener">“变量提升”</a> 现象，所以 var 定义变量可以先使用，后声明，而 let 和 const 只可先声明，后使用；</li><li>let 声明的变量存在暂时性死区，即只要块级作用域中存在 let，那么它所声明的变量就绑定了这个区域，不再受外部的影响；</li><li>let 不允许在相同作用域内，重复声明同一个变量；</li><li>const 在声明时必须初始化赋值，一旦声明，其声明的值就不允许改变，更不允许重复声明。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着ES6规范的到来，JavaScript中定义变量的方法已经由单一的 var 方式发展到了 var、let、const 三种之多，var众所周知，可那俩新来的哥们到底有啥新特性？到底该啥时用？&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>cookies，sessionStorage 和 localStorage 的区别</title>
    <link href="http://liuzhinan.com/2019/07/11/cookies%EF%BC%8CsessionStorage%20%E5%92%8C%20localStorage%20%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://liuzhinan.com/2019/07/11/cookies，sessionStorage 和 localStorage 的区别/</id>
    <published>2019-07-11T08:53:14.000Z</published>
    <updated>2019-08-08T08:48:55.938Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/07/11/cookies，sessionStorage%20和%20localStorage%20的区别/huijian.gif" title="This is an huijianimage"><a id="more"></a><p>随着互联网的快速发展，基于网页的应用随之增多，同时也变得越来越复杂，为了满足不同的需求会经常在本地存储大量数据，传统方式我们会用document.cookie来进行存储，但是cookie的存储大小只有4k左右，并且解析也比较复杂，每一次发送请求都需要携带cookie这样会造成带宽的浪费，给开发者带来诸多不便。</p><p>随着HTML5的到来为这些问题带来了解决方案，web存储的诞生解决了cookie存在的各种问题，web存储是将数据存储到用户的电脑上，这样可以缓解服务器的压力同时提高体验。</p><p><strong>webstorage</strong></p><p>webstorage是本地存储，存储在客户端，包括localStorage和sessionStorage。</p><p><strong>localStorage</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage生命周期是永久，这意味着除非用户显示在浏览器提供的UI上清除localStorage信息，否则这些信息将永远存在。存放数据大小为一般为5MB,而且它仅在客户端（即浏览器）中保存，不参与和服务器的通信。</span><br></pre></td></tr></table></figure><p><strong>sessionStorage</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage仅在当前会话下有效，关闭页面或浏览器后被清除。存放数据大小为一般为5MB,而且它仅在客户端（即浏览器）中保存，不参与和服务器的通信。源生接口可以接受，亦可再次封装来对Object和Array有更好的支持。</span><br></pre></td></tr></table></figure><p>localStorage和sessionStorage使用时使用相同的API：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem(&quot;key&quot;,&quot;value&quot;);//以“key”为名称存储一个值“value”</span><br><span class="line"></span><br><span class="line">localStorage.getItem(&quot;key&quot;);//获取名称为“key”的值</span><br><span class="line"></span><br><span class="line">localStorage.removeItem(&quot;key&quot;);//删除名称为“key”的信息。</span><br><span class="line"></span><br><span class="line">localStorage.clear();​//清空localStorage中所有信息</span><br></pre></td></tr></table></figure><p><strong>Cookie</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">生命期为只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。 存放数据大小为4K左右 。有个数限制（各浏览器不同），一般不能超过20个。与服务器端通信：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题。但Cookie需要程序员自己封装，源生的Cookie接口不友好。</span><br></pre></td></tr></table></figure><ul><li><strong>sessionStorage 、localStorage 和 cookie 之间的区别</strong><br>共同点：都是保存在浏览器端，且同源的。</li><li>区别：cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递；cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下。存储大小限制也不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。</li><li>而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li><li>数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。</li><li>作用域不同，sessionStorage<strong>不在</strong>不同的浏览器窗口中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。Web Storage 支持事件通知机制，可以将数据更新的通知发送给监听者。Web Storage 的 api 接口使用更方便。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2019/07/11/cookies，sessionStorage%20和%20localStorage%20的区别/huijian.gif&quot; title=&quot;This is an huijianimage&quot;&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
